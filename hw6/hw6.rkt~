;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname Racket_Behavior) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ())))
;; Victor Cheung 438907 CMSC 15100 AUT 13 John Reppy

;; -------------------------------------------------
;; -------------------Problem2----------------------
;; -------------------------------------------------
;; σ is a type variable, a mnemonic for "state."

;; search : σ (σ -> (or (listof σ) 'goal)) -> (or σ false)
;; generic backtrack search starting from the start state.  The next
;; function either returns 'goal, when its argument is a goal state,
;; '() when its argument is a dead end, or else a list of successor
;; states.
(define (search start next)
  (local
    {;; look : σ -> (or σ false)
     ;; starting from given state, return a goal state or false
     (define (look s)
       (match (next s)
         ['goal s]
         [next-states
          (local
            {;; lp : (listof σ) -> (or σ false)
             ;; look for a goal from list of states;
             ;; return first goal encountered, or false 
             (define (lp ss)
               (cond
                [(empty? ss) false]
                [else 
                 (match (look (first ss))
                   [#f (lp (rest ss))]
                   [g g])]))}
            (lp next-states))]))}
    (look start)))







;; -------------------------------------------------
;; -------------------Problem2----------------------
;; -------------------------------------------------

;; vec-max: (vec num) -> num
;; returns the max value of a vector of numbers
(define (vec-max v)
  (local { (define length (vector-length v))
           (define (max i m)
             (if (< i length)
                 (if (> (vector-ref v i) m)
                     (max (add1 i) (vector-ref v i))
                     (max (add1 i) m))
                 m)) }
    (if (= length 0)
        (error "vector cannot be empty")
        (max 0 (vector-ref v 0)))))

(check-expect (vec-max (vector 1 2 3 4 5 6)) 6)
(check-expect (vec-max (vector 0 0 0 0 0 0)) 0)
(check-error (vec-max (vector)))

;; vec-reduce : (α α -> α) α (vec α) -> α
;; reduce the vector given a commutative operator and an identity
(define (vec-reduce f z v) 
  (local { (define length (vector-length v))
           (define (fold i acc)
             (cond
               [(< i length) (fold (add1 i) (f (vector-ref v i) acc))]
               [else acc])) }
    (if (= length 0)
        z
        (fold 0 z))))

(check-expect (vec-reduce + 0 (vector 1 2 3 4 5)) 15)
(check-expect (vec-reduce - 0 (vector)) 0)

;; vec-indices : (α -> bool) (vec α) -> (listof num)
;; return the list of indices of values for which the test is true, 
;; in ascending order
(define (vec-indices pred v)
  (local { (define length (vector-length v))
           (define (filter i)
             (cond
               [(< i length) (if (pred (vector-ref v i))
                                 (cons i (filter (add1 i)))
                                 (filter (add1 i)))]
               [else '()])) }
    (filter 0)))

(check-expect (vec-indices positive? (vector -1 -2 -3 -4 1 2 3 4)) '(4 5 6 7))
(check-expect (vec-indices procedure? (vector (λ (x) (* x x))
                                              (λ (f g) (λ (x) (f (g x))))
                                              (λ (f n) (λ (x) (f n x)))
                                              "Haskell Curry"))
              '(0 1 2))
