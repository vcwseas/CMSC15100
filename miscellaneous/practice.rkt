#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 199 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 5 61 244 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 73 142 42 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 35 141 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 48 96 0
0 0 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 7 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 140 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 88 209 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 151 34 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 124 67 137 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 44 140 25 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 75 8 #"Courier\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 26 #" Bitstream Vera Sans Mono\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
31 #"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 41
#"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
35 #"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 37 #"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 38 #"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 8 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 8 24 #"drscheme:text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 8 #"Courier\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 178 34 34
255 255 255 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 178 34 34
255 255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 178 34 34
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Andale Mono\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 30 0 44 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 3 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 3 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 2844 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 178
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname |#practic"
 #"e|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t con"
 #"structor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; === higher-order programming"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; ! : (alpha -> bool) -> (alpha -> bool)"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; return the logical negation of the given test2"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #" (("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 23 3 3 #" ) "
0 0 20 3 2 #"-2"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #" (("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";; disj: (alpha -> bool) (alpha -> bool) -> (alpha -> bool)"
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";; return the test consisting of the disjunction of what's tested by"
 #" f and g"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"disj"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #" (("
0 0 14 3 4 #"disj"
0 0 23 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 23 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 23 3 2 #") "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #" (("
0 0 14 3 4 #"disj"
0 0 23 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 23 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51
(
 #";; conj : (\316\261 -> bool) (\316\261 -> bool) -> (\316\261 -> bool"
 #")"
) 0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";; return the test consisting of the conjunction of what's tested by"
 #" f and g"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"conj"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 3 #" (("
0 0 14 3 4 #"conj"
0 0 23 3 2 #" ("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 23 3 4 #")  ("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";; an (order-suit alpha) is a (make-orders lt le gt ge eq ne)"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; where weach item is an (alpha alpha -> bool)"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; abbrev, less than, less than or equal, greater than,"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; greater than or equal, equal, not equal"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 6 #"orders"
0 0 23 3 2 #" ("
0 0 14 3 2 #"lt"
0 0 23 3 1 #" "
0 0 14 3 2 #"le"
0 0 23 3 1 #" "
0 0 14 3 2 #"gt"
0 0 23 3 1 #" "
0 0 14 3 2 #"ge"
0 0 23 3 1 #" "
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 14 3 2 #"ne"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; orders-from-lt : (alpha alpha -> bool) -> (order-suite alpha)"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";; given a less-than function, return the collection of six common"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; comparisons. "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"orders-from-lt"
0 0 23 3 1 #" "
0 0 14 3 2 #"lt"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"ge"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 2 #"lt"
0 0 23 3 1 #" "
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"eq"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"gt"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 3 #") ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 3 #" (("
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 14 3 2 #"lt"
0 0 23 3 2 #") "
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                             (("
0 0 14 3 2 #"ge"
0 0 23 3 1 #" "
0 0 14 3 2 #"lt"
0 0 23 3 2 #") "
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"ne"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 3 #" (("
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 14 3 2 #"lt"
0 0 23 3 2 #") "
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"le"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 3 #") ("
0 0 14 3 2 #"or"
0 0 23 3 3 #" (("
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 14 3 2 #"lt"
0 0 23 3 2 #") "
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 2 #"lt"
0 0 23 3 1 #" "
0 0 14 3 2 #"n1"
0 0 23 3 1 #" "
0 0 14 3 2 #"n2"
0 0 23 3 6 #")))) }"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 11 #"make-orders"
0 0 23 3 1 #" "
0 0 14 3 2 #"lt"
0 0 23 3 1 #" "
0 0 14 3 2 #"le"
0 0 23 3 1 #" "
0 0 14 3 2 #"gt"
0 0 23 3 1 #" "
0 0 14 3 2 #"ge"
0 0 23 3 1 #" "
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 14 3 2 #"ne"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; === tree traversal"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; a bst is either "
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; - empty, or"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; - a (make-bst root lsub rsub)"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";;   where root is an integer, lsub and rsub are bsts"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"bst"
0 0 23 3 2 #" ("
0 0 14 3 4 #"root"
0 0 23 3 1 #" "
0 0 14 3 4 #"lsub"
0 0 23 3 1 #" "
0 0 14 3 4 #"rsub"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"test-bst"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 3 #") ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 3 #") ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #" ("
0 0 14 3 8 #"make-bst"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; preorder: bst -> (listof int)"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; traverse a bst in preorder "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"preorder"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 3 #"()]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-root"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"preorder"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-lsub"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"preorder"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-rsub"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; postorder: bst -> (listof int)"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; traverse a bst in postorder"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"postorder"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 3 #"()]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 9 #"postorder"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-lsub"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 4 #")) ("
0 0 14 3 9 #"postorder"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-rsub"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-root"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; in-order: bst -> (listof int)"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; traverse a bst in order; produces"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; a sorted and ascending list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"in-order"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 3 #"()]"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 11 #"level-order"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-lsub"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-root"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 4 #")) ("
0 0 14 3 11 #"level-order"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-rsub"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; level-order: bst -> (listof int)"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; traverse a bst in level order"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"level-order"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"traverse"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"               [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 3 #"()]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-root"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 4 #")) ("
0 0 14 3 8 #"traverse"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 64
#"                                                               ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-lsub"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 67
#"                                                                   "
0 0 20 3 1 #"'"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 68
#"                                                                   ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-lsub"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 5 #")))) "
0 0 23 29 1 #"\n"
0 0 23 3 64
#"                                                               ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-rsub"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 67
#"                                                                   "
0 0 20 3 1 #"'"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 68
#"                                                                   ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bst-rsub"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"queue"
0 0 23 3 11 #")))))))]))}"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"traverse"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 6 #"()))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; === vector operations"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; vec->list : (vec \316\261) -> (list a)"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; convert vector to list and don't call built-in vector->list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"vec->list"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"v->l"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"v->l"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 3 #"lst"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 3 #"lst"
0 0 23 3 4 #")) }"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"reverse"
0 0 23 3 2 #" ("
0 0 14 3 4 #"v->l"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 6 #"()))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"vec->list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; list->vec : (list \316\261) -> (vec \316\261)"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; convert list to vector and don't call built-in list->vector"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"list->vec"
0 0 23 3 1 #" "
0 0 14 3 2 #"xs"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 2 #"xs"
0 0 23 3 4 #")) }"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 12 #"build-vector"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 1 #"i"
0 0 23 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 2 #"xs"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"list->vec"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"vector"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; === in-place sorting"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 55
(
 #";; selection-sort! : (\316\261 \316\261 -> bool) (vec \316\261) -> ["
 #"void]"
) 0 0 23 29 1 #"\n"
0 0 17 3 29 #";; do selection sort in place"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"selection-sort!"
0 0 23 3 1 #" "
0 0 14 3 3 #"cmp"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 73
(
 #";; finds the \"extreme\" of a vector that goes on the beginning of t"
 #"he list"
) 0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 68
#";; item is a posn such that x keeps track of the value of the alpha "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 34 #";; and y keeps track of its index "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"extreme"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 7 #"extreme"
0 0 23 3 2 #" ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cmp"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 14 3 4 #"item"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 9 #"make-posn"
0 0 23 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 1 #"i"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 4 #"item"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 37 #";; sort starts at 0 and increments up"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 62
#";; everytime sort runs it switches the extreme of the vector, "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 53 #";; CONSIDERING only values at indices greater than i,"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 73
(
 #";; to the beginning position and whatever was there to extreme's pos"
 #"ition"
) 0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"ext"
0 0 23 3 2 #" ("
0 0 14 3 7 #"extreme"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 1 #"i"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"ith-element"
0 0 23 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 4 #")) }"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 5 #"begin"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 11 #"vector-set!"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 1 #" "
0 0 14 3 3 #"ext"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 11 #"vector-set!"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 1 #" "
0 0 14 3 3 #"ext"
0 0 23 3 2 #") "
0 0 14 3 11 #"ith-element"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"sort"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 4 #"void"
0 0 23 3 4 #")) }"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"sort"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"test-vector"
0 0 23 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 19 #"))                 "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50
#";; mergesort! : (\316\261 \316\261 -> bool) (vec \316\261) -> [void]"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; do mergesort in place"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"mergesort!"
0 0 23 3 1 #" "
0 0 14 3 3 #"cmp"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"  ( "
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"length"
0 0 23 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"merge-aux"
0 0 23 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 1 #" "
0 0 14 3 3 #"end"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 3 #"end"
0 0 23 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"mid"
0 0 23 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 3 #"end"
0 0 23 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 5 #"))) }"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 5 #"begin"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 7 #"display"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 23 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 23 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 23 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 23 3 1 #" "
0 0 14 3 3 #"mid"
0 0 23 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 23 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 23 3 1 #" "
0 0 14 3 3 #"end"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 9 #"merge-aux"
0 0 23 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 1 #" "
0 0 14 3 3 #"mid"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 9 #"merge-aux"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 3 #"mid"
0 0 23 3 2 #") "
0 0 14 3 3 #"end"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 5 #"merge"
0 0 23 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 1 #" "
0 0 14 3 3 #"mid"
0 0 23 3 1 #" "
0 0 14 3 3 #"end"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 4 #"void"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 17 3 42 #";; i is the beginning of the first segment"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 17 3 43 #";; m is the beginning of the second segment"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 17 3 43 #";; n is the end point of the second segment"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"merge"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"swap"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"temp"
0 0 23 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 4 #")) }"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 15 3 5 #"begin"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 11 #"vector-set!"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 11 #"vector-set!"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #" "
0 0 14 3 4 #"temp"
0 0 23 3 5 #")))) "
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"sort-z"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cmp"
0 0 23 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 14 3 6 #"sort-z"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 15 3 5 #"begin"
0 0 23 3 2 #" ("
0 0 14 3 4 #"swap"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 3 #") ("
0 0 14 3 6 #"sort-z"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 4 #"sort"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 2 #") "
0 0 14 3 1 #"n"
0 0 23 3 5 #"))) }"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 6 #"sort-z"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 14 3 4 #"void"
0 0 23 3 3 #"))}"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 4 #"sort"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 6 #"))) } "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 9 #"merge-aux"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")))) "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"test-vector2"
0 0 23 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 3 #") )"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"test-vector3"
0 0 23 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"second-half"
0 0 23 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 2 #")("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"first-half"
0 0 23 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 2 #")("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 17 #"sorted-first-half"
0 0 23 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 23 3 1 #" "
0 0 14 3 10 #"first-half"
0 0 23 3 1 #" "
0 0 14 3 1 #"<"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"sorted-second-half"
0 0 23 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 23 3 1 #" "
0 0 14 3 11 #"second-half"
0 0 23 3 1 #" "
0 0 14 3 1 #"<"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"test-list4"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 14 3 17 #"sorted-first-half"
0 0 23 3 1 #" "
0 0 14 3 18 #"sorted-second-half"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"test-vector4"
0 0 23 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 23 3 1 #" "
0 0 14 3 10 #"test-list4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 13 #";; === graphs"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; a vertex is a (make-vertex label edges) where"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; - label is a symbol, and"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; - edges (edges out) is a (listof symbol)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 6 #"vertex"
0 0 23 3 2 #" ("
0 0 14 3 5 #"label"
0 0 23 3 1 #" "
0 0 14 3 5 #"edges"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; a graph is a (listof vertex)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; edges-into : symbol graph -> (listof symbol)"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; return the lists of labels of edges that go into v"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"edges-into"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"reverse"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v2"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-edges"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-label"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 2 #") "
0 0 14 3 3 #"acc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 3 #"acc"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 14 3 1 #"g"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"edges-into"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 10 #"test-graph"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; remove-vertex : symbol graph -> graph"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; remove vertex and all edges in or out of it"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"remove-vertex"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"reverse"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"v2"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-label"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-label"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-edges"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 4 #"))) "
0 0 14 3 3 #"acc"
0 0 23 3 5 #")])) "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 14 3 1 #"g"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; component : symbol graph -> graph"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; return the whole reachable graph starting at v"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; PRE: g is an undirected graph"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"component"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"find"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"aux"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 21 #"\"no such node exists\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-label"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 3 #"aux"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 7 #"))))) }"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 3 #"aux"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"traverse"
0 0 23 3 1 #" "
0 0 14 3 5 #"stack"
0 0 23 3 1 #" "
0 0 14 3 3 #"lov"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"               [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"stack"
0 0 23 3 2 #") "
0 0 14 3 3 #"lov"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 8 #"traverse"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 6 #"symbol"
0 0 23 3 3 #") ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 2 #" ("
0 0 14 3 4 #"find"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 2 #") "
0 0 14 3 3 #"lov"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #" "
0 0 14 3 5 #"stack"
0 0 23 3 6 #")))) ("
0 0 14 3 12 #"vertex-edges"
0 0 23 3 2 #" ("
0 0 14 3 4 #"find"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"stack"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 5 #"stack"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 4 #"find"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 5 #"stack"
0 0 23 3 3 #")) "
0 0 14 3 3 #"lov"
0 0 23 3 7 #"))])) }"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"reverse"
0 0 23 3 2 #" ("
0 0 14 3 8 #"traverse"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 6 #"()))))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; connected-components : graph -> (listof graph)"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; return a list of components"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; PRE: g is an undirected graph"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"connected-components"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 2 #"lp"
0 0 23 3 1 #" "
0 0 14 3 6 #"rest-g"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"               [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"rest-g"
0 0 23 3 2 #") "
0 0 14 3 3 #"log"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"new-comp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"component"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-label"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"rest-g"
0 0 23 3 3 #")) "
0 0 14 3 1 #"g"
0 0 23 3 4 #")) }"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 14 #"graph-in-list?"
0 0 23 3 1 #" "
0 0 14 3 8 #"new-comp"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 2 #"lp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"rest-g"
0 0 23 3 2 #") "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 2 #"lp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"rest-g"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 8 #"new-comp"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 9 #"))))])) }"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"lp"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 5 #"())))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; graph-in-list? : graph (listof graph) -> bool"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"graph-in-list?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"eq-test"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 3 #")) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 2 #") "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 7 #"eq-test"
0 0 23 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 2 #") "
0 0 14 3 2 #"g1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 2 #") "
0 0 14 3 2 #"g2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 20 3 2 #"#f"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 2 #"#f"
0 0 23 3 3 #"))}"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"ormap"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 5 #"graph"
0 0 23 3 3 #") ("
0 0 14 3 7 #"eq-test"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 5 #"graph"
0 0 23 3 3 #")) "
0 0 14 3 3 #"log"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"princeton"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"8"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"7"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"9"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"test-graph"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"Z"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"Z"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"AA"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"AB"
0 0 23 3 1 #" "
0 0 14 3 2 #"AC"
0 0 23 3 1 #" "
0 0 14 3 2 #"AD"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"AB"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"AA"
0 0 23 3 1 #" "
0 0 14 3 2 #"AC"
0 0 23 3 1 #" "
0 0 14 3 2 #"AD"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"AC"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"AA"
0 0 23 3 1 #" "
0 0 14 3 2 #"AB"
0 0 23 3 1 #" "
0 0 14 3 2 #"AD"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"AD"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"AA"
0 0 23 3 1 #" "
0 0 14 3 2 #"AB"
0 0 23 3 1 #" "
0 0 14 3 2 #"AC"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"G"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"e"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"d"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"h"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"h"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 11 #"make-vertex"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"h"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; succs : label graph -> (listof label)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"succs"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 16 #"\"unknown vertex\""
0 0 23 3 7 #")      "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"vertex"
0 0 23 3 1 #" "
0 0 14 3 2 #"la"
0 0 23 3 1 #" "
0 0 14 3 2 #"ed"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 2 #"la"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 2 #"ed"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 5 #"succs"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 7 #")))])))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; dfs-list : graph -> (listof vertex)"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; returns list of vertex in DFS order "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"dfs-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"dfs"
0 0 23 3 1 #" "
0 0 14 3 2 #"nd"
0 0 23 3 1 #" "
0 0 14 3 7 #"visited"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"               [("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 2 #"nd"
0 0 23 3 1 #" "
0 0 14 3 7 #"visited"
0 0 23 3 2 #") "
0 0 14 3 7 #"visited"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 23 3 1 #" "
0 0 14 3 3 #"dfs"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"nd"
0 0 23 3 1 #" "
0 0 14 3 7 #"visited"
0 0 23 3 3 #") ("
0 0 14 3 5 #"succs"
0 0 23 3 1 #" "
0 0 14 3 2 #"nd"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 7 #"))])) }"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"foldl"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 2 #"nd"
0 0 23 3 1 #" "
0 0 14 3 7 #"visited"
0 0 23 3 3 #") ("
0 0 14 3 3 #"dfs"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-label"
0 0 23 3 1 #" "
0 0 14 3 2 #"nd"
0 0 23 3 2 #") "
0 0 14 3 7 #"visited"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 14 3 1 #"g"
0 0 23 3 5 #" ))) "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; bfs-list : graph -> (litof vertex)"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; returns list of vertex in BFS order"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"bfs-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 4 #" { ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"bfs"
0 0 23 3 1 #" "
0 0 14 3 2 #"nd"
0 0 23 3 1 #" "
0 0 14 3 7 #"visited"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 5 #"foldl"
0 0 23 3 1 #" "
0 0 14 3 3 #"bfs"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 4 #"node"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 14 3 7 #"visited"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 5 #"succs"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 7 #"visited"
0 0 23 3 4 #")) ("
0 0 14 3 5 #"succs"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 4 #")))}"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"foldl"
0 0 23 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 6 #"vertex"
0 0 23 3 1 #" "
0 0 14 3 7 #"visited"
0 0 23 3 3 #") ("
0 0 14 3 3 #"bfs"
0 0 23 3 2 #" ("
0 0 14 3 12 #"vertex-label"
0 0 23 3 1 #" "
0 0 14 3 6 #"vertex"
0 0 23 3 2 #") "
0 0 14 3 7 #"visited"
0 0 23 3 3 #")) "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 14 3 1 #"g"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0           0
